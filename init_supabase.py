"""
Initialize Supabase table for Israeli Government Decisions
Run this script to create the required table structure in Supabase.
"""

import os
from dotenv import load_dotenv
from supabase import create_client

# Load environment variables
load_dotenv()

# SQL for creating the table
CREATE_TABLE_SQL = """
-- Create israeli_government_decisions table
CREATE TABLE IF NOT EXISTS israeli_government_decisions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    decision_number TEXT,
    title TEXT NOT NULL,
    description TEXT,
    date DATE,
    ministry TEXT,
    status TEXT,
    category TEXT,
    tags TEXT[],
    full_text TEXT,
    attachments JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_decisions_date ON israeli_government_decisions(date);
CREATE INDEX IF NOT EXISTS idx_decisions_ministry ON israeli_government_decisions(ministry);
CREATE INDEX IF NOT EXISTS idx_decisions_status ON israeli_government_decisions(status);
CREATE INDEX IF NOT EXISTS idx_decisions_category ON israeli_government_decisions(category);

-- Enable Row Level Security
ALTER TABLE israeli_government_decisions ENABLE ROW LEVEL SECURITY;

-- Create policy for read access (adjust as needed)
CREATE POLICY "Enable read access for all users" ON israeli_government_decisions
    FOR SELECT USING (true);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_israeli_government_decisions_updated_at
    BEFORE UPDATE ON israeli_government_decisions
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
"""

# Sample data for testing
SAMPLE_DATA = [
    {
        "decision_number": "2023-001",
        "title": "◊î◊ß◊û◊™ ◊ï◊¢◊ì◊î ◊ú◊ê◊ï◊û◊ô◊™ ◊ú◊ó◊ì◊©◊†◊ï◊™ ◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊™",
        "description": "◊î◊ó◊ú◊ò◊î ◊¢◊ú ◊î◊ß◊û◊™ ◊ï◊¢◊ì◊î ◊ú◊ê◊ï◊û◊ô◊™ ◊ú◊ß◊ô◊ì◊ï◊ù ◊ó◊ì◊©◊†◊ï◊™ ◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊™ ◊ë◊û◊í◊ñ◊® ◊î◊¶◊ô◊ë◊ï◊®◊ô",
        "date": "2023-01-15",
        "ministry": "◊û◊©◊®◊ì ◊î◊ó◊ì◊©◊†◊ï◊™, ◊î◊û◊ì◊¢ ◊ï◊î◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î",
        "status": "◊ê◊ï◊©◊®",
        "category": "◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î ◊ï◊ó◊ì◊©◊†◊ï◊™",
        "tags": ["◊ó◊ì◊©◊†◊ï◊™", "◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î", "◊û◊í◊ñ◊® ◊¶◊ô◊ë◊ï◊®◊ô"],
        "full_text": "◊î◊û◊û◊©◊ú◊î ◊û◊ó◊ú◊ô◊ò◊î ◊¢◊ú ◊î◊ß◊û◊™ ◊ï◊¢◊ì◊î ◊ú◊ê◊ï◊û◊ô◊™ ◊©◊™◊§◊ß◊ô◊ì◊î ◊ú◊ß◊ì◊ù ◊©◊ô◊û◊ï◊© ◊ë◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊ï◊™ ◊ó◊ì◊©◊†◊ô◊ï◊™ ◊ë◊û◊í◊ñ◊® ◊î◊¶◊ô◊ë◊ï◊®◊ô..."
    },
    {
        "decision_number": "2023-002",
        "title": "◊™◊ï◊õ◊†◊ô◊™ ◊ú◊ê◊ï◊û◊ô◊™ ◊ú◊¶◊û◊¶◊ï◊ù ◊§◊¢◊®◊ô◊ù ◊ì◊ô◊í◊ô◊ò◊ú◊ô◊ô◊ù",
        "description": "◊ê◊ô◊©◊ï◊® ◊™◊ï◊õ◊†◊ô◊™ ◊®◊ë-◊©◊†◊™◊ô◊™ ◊ú◊¶◊û◊¶◊ï◊ù ◊§◊¢◊®◊ô◊ù ◊ì◊ô◊í◊ô◊ò◊ú◊ô◊ô◊ù ◊ë◊ê◊ï◊õ◊ú◊ï◊°◊ô◊ï◊™ ◊û◊ï◊ó◊ú◊©◊ï◊™",
        "date": "2023-02-20",
        "ministry": "◊û◊©◊®◊ì ◊î◊®◊ï◊ï◊ó◊î ◊ï◊î◊ë◊ô◊ò◊ó◊ï◊ü ◊î◊ó◊ë◊®◊™◊ô",
        "status": "◊ê◊ï◊©◊®",
        "category": "◊®◊ï◊ï◊ó◊î ◊ï◊ó◊ë◊®◊î",
        "tags": ["◊§◊¢◊®◊ô◊ù ◊ì◊ô◊í◊ô◊ò◊ú◊ô◊ô◊ù", "◊®◊ï◊ï◊ó◊î", "◊©◊ï◊ï◊ô◊ï◊ü ◊î◊ñ◊ì◊û◊†◊ï◊ô◊ï◊™"],
        "full_text": "◊ë◊û◊ò◊®◊î ◊ú◊¶◊û◊¶◊ù ◊§◊¢◊®◊ô◊ù ◊ì◊ô◊í◊ô◊ò◊ú◊ô◊ô◊ù, ◊î◊û◊û◊©◊ú◊î ◊û◊ê◊©◊®◊™ ◊™◊ï◊õ◊†◊ô◊™ ◊ú◊ê◊ï◊û◊ô◊™ ◊©◊™◊õ◊ú◊ï◊ú..."
    },
    {
        "decision_number": "2023-003",
        "title": "◊î◊®◊ó◊ë◊™ ◊™◊ï◊õ◊†◊ô◊™ ◊î◊ó◊ô◊†◊ï◊ö ◊î◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô",
        "description": "◊î◊®◊ó◊ë◊™ ◊™◊ï◊õ◊†◊ô◊™ ◊î◊ó◊ô◊†◊ï◊ö ◊î◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô ◊ú◊õ◊ú◊ï◊ú ◊û◊ß◊¶◊ï◊¢◊ï◊™ ◊ë◊ô◊†◊î ◊û◊ú◊ê◊õ◊ï◊™◊ô◊™ ◊ï◊û◊ì◊¢◊ô ◊î◊†◊™◊ï◊†◊ô◊ù",
        "date": "2023-03-10",
        "ministry": "◊û◊©◊®◊ì ◊î◊ó◊ô◊†◊ï◊ö",
        "status": "◊ë◊™◊î◊ú◊ô◊ö",
        "category": "◊ó◊ô◊†◊ï◊ö",
        "tags": ["◊ó◊ô◊†◊ï◊ö", "◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊î", "◊ë◊ô◊†◊î ◊û◊ú◊ê◊õ◊ï◊™◊ô◊™"],
        "full_text": "◊û◊©◊®◊ì ◊î◊ó◊ô◊†◊ï◊ö ◊ô◊§◊¢◊ú ◊ú◊î◊®◊ó◊ë◊™ ◊™◊ï◊õ◊†◊ô◊™ ◊î◊ú◊ô◊û◊ï◊ì◊ô◊ù ◊î◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô◊™..."
    }
]

def main():
    """Initialize Supabase table and insert sample data"""
    print("üöÄ Initializing Supabase table...")
    
    try:
        # Get credentials
        url = os.getenv("SUPABASE_URL")
        key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")
        
        if not url or not key:
            print("‚ùå Missing Supabase credentials in .env file")
            return
        
        # Create client
        supabase = create_client(url, key)
        
        print("üìã Table creation SQL ready.")
        print("‚ö†Ô∏è  IMPORTANT: You need to run the SQL above in your Supabase SQL editor")
        print("Go to: Your Supabase Dashboard > SQL Editor > New Query")
        print("\n" + "="*50)
        print(CREATE_TABLE_SQL)
        print("="*50 + "\n")
        
        # Check if table exists
        try:
            response = supabase.table("israeli_government_decisions").select("count").execute()
            print(f"‚úÖ Table exists with {response.count} records")
            
            if response.count == 0:
                print("üìù Inserting sample data...")
                for item in SAMPLE_DATA:
                    supabase.table("israeli_government_decisions").insert(item).execute()
                print(f"‚úÖ Inserted {len(SAMPLE_DATA)} sample records")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Table might not exist yet. Error: {str(e)}")
            print("Please run the SQL above in Supabase first.")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

if __name__ == "__main__":
    main()